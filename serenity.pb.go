// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serenity.proto

package serenity

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Trade_Maker int32

const (
	Trade_Unknown Trade_Maker = 0
	Trade_Buyer   Trade_Maker = 1
	Trade_Seller  Trade_Maker = 2
)

var Trade_Maker_name = map[int32]string{
	0: "Unknown",
	1: "Buyer",
	2: "Seller",
}

var Trade_Maker_value = map[string]int32{
	"Unknown": 0,
	"Buyer":   1,
	"Seller":  2,
}

func (x Trade_Maker) String() string {
	return proto.EnumName(Trade_Maker_name, int32(x))
}

func (Trade_Maker) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f6e9c4a4b455854f, []int{1, 0}
}

type TradeQuery struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeQuery) Reset()         { *m = TradeQuery{} }
func (m *TradeQuery) String() string { return proto.CompactTextString(m) }
func (*TradeQuery) ProtoMessage()    {}
func (*TradeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e9c4a4b455854f, []int{0}
}

func (m *TradeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeQuery.Unmarshal(m, b)
}
func (m *TradeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeQuery.Marshal(b, m, deterministic)
}
func (m *TradeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeQuery.Merge(m, src)
}
func (m *TradeQuery) XXX_Size() int {
	return xxx_messageInfo_TradeQuery.Size(m)
}
func (m *TradeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TradeQuery proto.InternalMessageInfo

func (m *TradeQuery) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type Trade struct {
	Maker                Trade_Maker `protobuf:"varint,1,opt,name=maker,proto3,enum=serenity.Trade_Maker" json:"maker,omitempty"`
	Price                float32     `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity             float32     `protobuf:"fixed32,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	CreatedAt            *Timestamp  `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e9c4a4b455854f, []int{1}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetMaker() Trade_Maker {
	if m != nil {
		return m.Maker
	}
	return Trade_Unknown
}

func (m *Trade) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetQuantity() float32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Trade) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type QuoteQuery struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteQuery) Reset()         { *m = QuoteQuery{} }
func (m *QuoteQuery) String() string { return proto.CompactTextString(m) }
func (*QuoteQuery) ProtoMessage()    {}
func (*QuoteQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e9c4a4b455854f, []int{2}
}

func (m *QuoteQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteQuery.Unmarshal(m, b)
}
func (m *QuoteQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteQuery.Marshal(b, m, deterministic)
}
func (m *QuoteQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteQuery.Merge(m, src)
}
func (m *QuoteQuery) XXX_Size() int {
	return xxx_messageInfo_QuoteQuery.Size(m)
}
func (m *QuoteQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteQuery.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteQuery proto.InternalMessageInfo

func (m *QuoteQuery) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type Quote struct {
	AskPrice             float32    `protobuf:"fixed32,1,opt,name=askPrice,proto3" json:"askPrice,omitempty"`
	AskVolume            float32    `protobuf:"fixed32,2,opt,name=askVolume,proto3" json:"askVolume,omitempty"`
	BidPrice             float32    `protobuf:"fixed32,3,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	BidVolume            float32    `protobuf:"fixed32,4,opt,name=bidVolume,proto3" json:"bidVolume,omitempty"`
	CreatedAt            *Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Quote) Reset()         { *m = Quote{} }
func (m *Quote) String() string { return proto.CompactTextString(m) }
func (*Quote) ProtoMessage()    {}
func (*Quote) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e9c4a4b455854f, []int{3}
}

func (m *Quote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quote.Unmarshal(m, b)
}
func (m *Quote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quote.Marshal(b, m, deterministic)
}
func (m *Quote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quote.Merge(m, src)
}
func (m *Quote) XXX_Size() int {
	return xxx_messageInfo_Quote.Size(m)
}
func (m *Quote) XXX_DiscardUnknown() {
	xxx_messageInfo_Quote.DiscardUnknown(m)
}

var xxx_messageInfo_Quote proto.InternalMessageInfo

func (m *Quote) GetAskPrice() float32 {
	if m != nil {
		return m.AskPrice
	}
	return 0
}

func (m *Quote) GetAskVolume() float32 {
	if m != nil {
		return m.AskVolume
	}
	return 0
}

func (m *Quote) GetBidPrice() float32 {
	if m != nil {
		return m.BidPrice
	}
	return 0
}

func (m *Quote) GetBidVolume() float32 {
	if m != nil {
		return m.BidVolume
	}
	return 0
}

func (m *Quote) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Timestamp struct {
	Seconds              int64    `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos                int32    `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e9c4a4b455854f, []int{4}
}

func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timestamp.Unmarshal(m, b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return xxx_messageInfo_Timestamp.Size(m)
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func init() {
	proto.RegisterEnum("serenity.Trade_Maker", Trade_Maker_name, Trade_Maker_value)
	proto.RegisterType((*TradeQuery)(nil), "serenity.TradeQuery")
	proto.RegisterType((*Trade)(nil), "serenity.Trade")
	proto.RegisterType((*QuoteQuery)(nil), "serenity.QuoteQuery")
	proto.RegisterType((*Quote)(nil), "serenity.Quote")
	proto.RegisterType((*Timestamp)(nil), "serenity.Timestamp")
}

func init() { proto.RegisterFile("serenity.proto", fileDescriptor_f6e9c4a4b455854f) }

var fileDescriptor_f6e9c4a4b455854f = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0xbf, 0x05, 0x16, 0xda, 0x21, 0xe1, 0x23, 0x2b, 0x26, 0x0d, 0xf1, 0xd0, 0x70, 0x22,
	0x21, 0x21, 0x80, 0x89, 0x17, 0x4f, 0x7a, 0xf1, 0x64, 0x22, 0x45, 0xbd, 0x2f, 0x74, 0x0e, 0x4d,
	0xe9, 0xb6, 0xee, 0x6e, 0x63, 0xfa, 0x52, 0x3e, 0x86, 0xcf, 0xe1, 0xa3, 0x98, 0xee, 0xb6, 0x05,
	0x39, 0x18, 0xb9, 0xf5, 0x3f, 0x33, 0xbf, 0x9d, 0xf9, 0xcf, 0x14, 0x06, 0x0a, 0x25, 0x8a, 0x48,
	0x17, 0xf3, 0x4c, 0xa6, 0x3a, 0x65, 0x4e, 0xad, 0x27, 0x3e, 0xc0, 0xb3, 0xe4, 0x21, 0xae, 0x73,
	0x94, 0x05, 0x63, 0xd0, 0xc9, 0x78, 0x24, 0x3d, 0xe2, 0x93, 0xa9, 0x1b, 0x98, 0xef, 0xc9, 0x27,
	0x01, 0x6a, 0x4a, 0xd8, 0x0c, 0x68, 0xc2, 0x63, 0xb4, 0xe9, 0xc1, 0xea, 0x72, 0xde, 0xbc, 0x6a,
	0xf2, 0xf3, 0xc7, 0x32, 0x19, 0xd8, 0x1a, 0x36, 0x02, 0x9a, 0xc9, 0x68, 0x87, 0x5e, 0xcb, 0x27,
	0xd3, 0x56, 0x60, 0x05, 0x1b, 0x83, 0xf3, 0x96, 0x73, 0xa1, 0x23, 0x5d, 0x78, 0x6d, 0x93, 0x68,
	0x34, 0x5b, 0x82, 0xbb, 0x93, 0xc8, 0x35, 0x86, 0x77, 0xda, 0xeb, 0xf8, 0x64, 0xda, 0x5f, 0x5d,
	0x1c, 0xb5, 0x88, 0x12, 0x54, 0x9a, 0x27, 0x59, 0x70, 0xa8, 0x9a, 0xcc, 0x80, 0x9a, 0xa6, 0xac,
	0x0f, 0xbd, 0x17, 0x11, 0x8b, 0xf4, 0x5d, 0x0c, 0xff, 0x31, 0x17, 0xe8, 0x7d, 0x5e, 0xa0, 0x1c,
	0x12, 0x06, 0xd0, 0xdd, 0xe0, 0x7e, 0x8f, 0x72, 0xd8, 0x2a, 0xad, 0xae, 0xf3, 0x54, 0xff, 0x62,
	0xf5, 0x83, 0x00, 0x35, 0x25, 0xe5, 0x9c, 0x5c, 0xc5, 0x4f, 0xc6, 0x00, 0xb1, 0x73, 0xd6, 0x9a,
	0x5d, 0x81, 0xcb, 0x55, 0xfc, 0x9a, 0xee, 0xf3, 0xa4, 0x76, 0x77, 0x08, 0x94, 0xe4, 0x36, 0x0a,
	0x2d, 0x59, 0x39, 0xac, 0x75, 0x49, 0x6e, 0xa3, 0xb0, 0x22, 0x3b, 0x96, 0x6c, 0x02, 0x3f, 0xfd,
	0xd3, 0x3f, 0xf9, 0xbf, 0x05, 0xb7, 0x89, 0x33, 0x0f, 0x7a, 0x0a, 0x77, 0xa9, 0x08, 0x95, 0x19,
	0xb9, 0x1d, 0xd4, 0xb2, 0xbc, 0x85, 0xe0, 0x22, 0x55, 0x66, 0x5a, 0x1a, 0x58, 0xb1, 0xfa, 0x22,
	0xe0, 0x6c, 0xaa, 0xe7, 0xd9, 0x12, 0x9c, 0x07, 0xd4, 0xf6, 0xce, 0xa3, 0x93, 0xc3, 0x9a, 0x85,
	0x8d, 0xff, 0x9f, 0x44, 0xd9, 0x0d, 0xf4, 0x37, 0x5a, 0x22, 0x4f, 0xce, 0xa1, 0x16, 0xa4, 0x6a,
	0x65, 0xf7, 0x7c, 0x04, 0x1d, 0x6e, 0x73, 0x0c, 0xd9, 0xb2, 0xa6, 0xd5, 0x39, 0xd4, 0x82, 0x6c,
	0xbb, 0xe6, 0x77, 0xbf, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x5e, 0x9b, 0xb9, 0x00, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SerenityClient is the client API for Serenity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SerenityClient interface {
	GetTrade(ctx context.Context, in *TradeQuery, opts ...grpc.CallOption) (*Trade, error)
	StreamTrade(ctx context.Context, in *TradeQuery, opts ...grpc.CallOption) (Serenity_StreamTradeClient, error)
	GetQuote(ctx context.Context, in *QuoteQuery, opts ...grpc.CallOption) (*Quote, error)
	StreamQuote(ctx context.Context, in *QuoteQuery, opts ...grpc.CallOption) (Serenity_StreamQuoteClient, error)
}

type serenityClient struct {
	cc *grpc.ClientConn
}

func NewSerenityClient(cc *grpc.ClientConn) SerenityClient {
	return &serenityClient{cc}
}

func (c *serenityClient) GetTrade(ctx context.Context, in *TradeQuery, opts ...grpc.CallOption) (*Trade, error) {
	out := new(Trade)
	err := c.cc.Invoke(ctx, "/serenity.Serenity/GetTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serenityClient) StreamTrade(ctx context.Context, in *TradeQuery, opts ...grpc.CallOption) (Serenity_StreamTradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Serenity_serviceDesc.Streams[0], "/serenity.Serenity/StreamTrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &serenityStreamTradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Serenity_StreamTradeClient interface {
	Recv() (*Trade, error)
	grpc.ClientStream
}

type serenityStreamTradeClient struct {
	grpc.ClientStream
}

func (x *serenityStreamTradeClient) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serenityClient) GetQuote(ctx context.Context, in *QuoteQuery, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/serenity.Serenity/GetQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serenityClient) StreamQuote(ctx context.Context, in *QuoteQuery, opts ...grpc.CallOption) (Serenity_StreamQuoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Serenity_serviceDesc.Streams[1], "/serenity.Serenity/StreamQuote", opts...)
	if err != nil {
		return nil, err
	}
	x := &serenityStreamQuoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Serenity_StreamQuoteClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type serenityStreamQuoteClient struct {
	grpc.ClientStream
}

func (x *serenityStreamQuoteClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SerenityServer is the server API for Serenity service.
type SerenityServer interface {
	GetTrade(context.Context, *TradeQuery) (*Trade, error)
	StreamTrade(*TradeQuery, Serenity_StreamTradeServer) error
	GetQuote(context.Context, *QuoteQuery) (*Quote, error)
	StreamQuote(*QuoteQuery, Serenity_StreamQuoteServer) error
}

// UnimplementedSerenityServer can be embedded to have forward compatible implementations.
type UnimplementedSerenityServer struct {
}

func (*UnimplementedSerenityServer) GetTrade(ctx context.Context, req *TradeQuery) (*Trade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrade not implemented")
}
func (*UnimplementedSerenityServer) StreamTrade(req *TradeQuery, srv Serenity_StreamTradeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrade not implemented")
}
func (*UnimplementedSerenityServer) GetQuote(ctx context.Context, req *QuoteQuery) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (*UnimplementedSerenityServer) StreamQuote(req *QuoteQuery, srv Serenity_StreamQuoteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamQuote not implemented")
}

func RegisterSerenityServer(s *grpc.Server, srv SerenityServer) {
	s.RegisterService(&_Serenity_serviceDesc, srv)
}

func _Serenity_GetTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerenityServer).GetTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serenity.Serenity/GetTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerenityServer).GetTrade(ctx, req.(*TradeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serenity_StreamTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TradeQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SerenityServer).StreamTrade(m, &serenityStreamTradeServer{stream})
}

type Serenity_StreamTradeServer interface {
	Send(*Trade) error
	grpc.ServerStream
}

type serenityStreamTradeServer struct {
	grpc.ServerStream
}

func (x *serenityStreamTradeServer) Send(m *Trade) error {
	return x.ServerStream.SendMsg(m)
}

func _Serenity_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerenityServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serenity.Serenity/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerenityServer).GetQuote(ctx, req.(*QuoteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serenity_StreamQuote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SerenityServer).StreamQuote(m, &serenityStreamQuoteServer{stream})
}

type Serenity_StreamQuoteServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type serenityStreamQuoteServer struct {
	grpc.ServerStream
}

func (x *serenityStreamQuoteServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

var _Serenity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serenity.Serenity",
	HandlerType: (*SerenityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrade",
			Handler:    _Serenity_GetTrade_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _Serenity_GetQuote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTrade",
			Handler:       _Serenity_StreamTrade_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamQuote",
			Handler:       _Serenity_StreamQuote_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serenity.proto",
}
